#!/bin/bash

# Written by Nicolas Bigaouette
# nbigaouette@gmail.com
# July 2010
# v0.1
# http://stackoverflow.com/questions/1887364/git-clone-to-external-drive-for-backup

now=`date +%Y%m%d_%Hh%M`
pwd=`pwd`

# Path containing links to folder containing repos
repos_path="/git"

me=nicolas

backup_servers=(
    "$me@soundwave"     "/home/nicolas/fichiers/backups/git_repos"
    "$me@cosmos"        "/home/nicolas/fichiers/backups/git_repos"
    "$me@unicron"       "/raid/nicolas/repositories/git"
    "$me@grimlock"      "/home/nicolas/backups/git_repos"
    "$me@sunstreaker"   "/home/nicolas/fichiers/backups/repositories/git"
)

logdir=/tmp/git_backup_logs
logfile=${logdir}/git_backup_${now}.log

stars="*********************************************************"
c="\e[36;1m"
n="\e[0m"

s="  "
git="git"
sudo=""
if [[ "$UID" == "0" ]]; then
    sudo="sudo -u USER"
fi

[[ ! -e "${logdir}" ]] && mkdir -p ${logdir}

log() {
    echo -e "${c}${@}${n}"
}

list_users() {
    unset users
    cd ${repos_path}
    users=(`/bin/ls -d *`)
    echo ${users[@]}
    cd - > /dev/null
}

list_user_repos() {
    if [[ -z "$1" ]]; then
        echo "Usage: list_user_repos <user>"
        return
    fi
    local_user="$1"

    cd ${repos_path}/${local_user}
    #repos=(`/bin/ls -d *`)
#     repos=(`find . -maxdepth 1 -mindepth 1 -type d | sed "s|./||g"`)
    repos=(`find . -type d -name "*.git" | sed "s|^./||g"`)
    cd - > /dev/null

    #echo "repos (${#repos[@]}) = ${repos[@]}"
    echo ${repos[@]}
}

create_remote_repo() {
    if [[ -z "$1" || -z "$2" || -z "$3" || -z "$4" ]]; then
        echo "Usage: create_remote_repo <local_user> <local_repo> <ssh_server> <remote_location>"
        return
    fi
    local_user="$1"
    local_repo="$2"
    ssh_server="$3"
    remote_location="$4"

    remote_repo="${remote_location}/${local_user}/${local_repo}"

    log "${s}${s}${s}Making sure a bare git repo exist at ${remote_repo} on ${ssh_server}..." \
                                                                                2>&1 | tee -a ${logfile}

    cmd="mkdir -p ${remote_repo} && cd ${remote_repo} && if [[ ! -e 'config' ]]; then git --bare init; fi"
    #echo "${s}${s}${s}ssh ${ssh_server} $cmd"                                   2>&1 | tee -a ${logfile}
    ssh ${ssh_server} ${cmd}
}

setup_repo_for_pushing() {
    if [[ -z "$1" || -z "$2" || -z "$3" || -z "$4" ]]; then
        echo "Usage: setup_repo_for_pushing <local_user> <local_repo> <ssh_server> <remote_location>"
        return
    fi
    local_user="$1"
    local_repo="$2"
    ssh_server="$3"
    remote_location="$4"

    remote_name="backup_${ssh_server}"

    log "${s}${s}${s}Setting up ${local_user}'s ${local_repo} to push to ${remote_location} on ${ssh_server}..." \
                                                                                2>&1 | tee -a ${logfile}

    cd ${repos_path}/${local_user}/${local_repo}
    remotes=(`${git} remote`)
    remote_present="false"
    for remote in ${remotes[@]}; do

        # Prune the remote's branches.
        ${sudo/USER/${me}} ${git} remote prune ${remote}                        2>&1 | tee -a ${logfile}

        if [[ "${remote}" == "${remote_name}" ]]; then
            remote_present="true"
        fi
    done
    if [[ "${remote_present}" == "false" ]]; then
        # Add remote
        ${sudo/USER/${me}} ${git} remote add ${remote_name} ssh://${ssh_server}${remote_location}/${local_user}/${local_repo} \
                                                                                2>&1 | tee -a ${logfile}
        ${sudo/USER/${me}} ${git} config remote.${remote_name}.mirror true \
                                                                                2>&1 | tee -a ${logfile}
    else
        # Make sure the url of the remote is set correctly
        ${sudo/USER/${me}} ${git} remote set-url        ${remote_name} ssh://${ssh_server}${remote_location}/${local_user}/${local_repo} \
                                                                                2>&1 | tee -a ${logfile}
        ${sudo/USER/${me}} ${git} remote set-url --push ${remote_name} ssh://${ssh_server}${remote_location}/${local_user}/${local_repo} \
                                                                                2>&1 | tee -a ${logfile}
    fi
    cd - > /dev/null
}

list_local_branches() {
    ${git} branch | grep -v master | sed "s|\* ||g"
}

push_branch() {
    branch="${1}"
    remote="${2}"
    cmd1="${git} push ${remote} ${branch}:refs/heads/${branch}"
    cmd2="${git} config branch.${branch}.remote ${remote}"
    cmd3="${git} config branch.${branch}.merge refs/heads/${branch}"
    echo $cmd1                                                                  2>&1 | tee -a ${logfile}
    $cmd1                                                                       2>&1 | tee -a ${logfile}
    echo $cmd1                                                                  2>&1 | tee -a ${logfile}
    $cmd2                                                                       2>&1 | tee -a ${logfile}
    echo $cmd3                                                                  2>&1 | tee -a ${logfile}
    $cmd3                                                                       2>&1 | tee -a ${logfile}
}

push_to_backup_server() {
    if [[ -z "$1" || -z "$2" || -z "$3" ]]; then
        echo "Usage: push_to_backup_server <local_user> <local_repo> <ssh_server>"
        return
    fi
    local_user="$1"
    local_repo="$2"
    ssh_server="$3"

    log "${s}${s}${s}Pushing ${local_user}'s ${local_repo} to push to ${ssh_server}..." \
                                                                                2>&1 | tee -a ${logfile}

    cd ${repos_path}/${local_user}/${local_repo}
    cmd="${git} push backup_${ssh_server}"
    echo "${s}${s}${s}$cmd"                                                     2>&1 | tee -a ${logfile}
    $cmd                                                                        2>&1 | tee -a ${logfile}

    # No need to push branches. Setting up a mirror in setup_repo_for_pushing() is enough
    #branches=(`list_local_branches`)
    #log "Pushing branches: ${branches[*]}"                                      2>&1 | tee -a ${logfile}
    #for branch in ${branches[*]}; do
    #    push_branch ${branch} backup_${ssh_server}
    #done

    cd - > /dev/null
}

backup_repo() {
    if [[ -z "$1" || -z "$2" || -z "$3" ]]; then
        echo "Usage: backup_repo <local_user> <local_repo> <ssh_server> <remote_location>"
        return
    fi
    local_user="$1"
    local_repo="$2"
    ssh_server="$3"
    remote_location="$4"

    create_remote_repo     ${local_user} ${local_repo} ${ssh_server} ${remote_location}
    setup_repo_for_pushing ${local_user} ${local_repo} ${ssh_server} ${remote_location}
    push_to_backup_server  ${local_user} ${local_repo} ${ssh_server}

}

backup_all_repos() {

    unset users
    users=`list_users`
    for user in ${users[@]}; do
        echo "${stars}"                                                         2>&1 | tee -a ${logfile}
        log "Backing up ${user}'s repos..."                                     2>&1 | tee -a ${logfile}

        unset repos
        repos=`list_user_repos ${user}`
        for (( i=0; i<${#backup_servers[@]}; i=i+2 )); do
            log  "${s}Sending ${user}'s repos to ${backup_servers[${i}]}..."    2>&1 | tee -a ${logfile}

            for repo in ${repos[@]}; do
                log "${s}${s}Sending ${user}'s ${repo} to ${backup_servers[${i}]}..." \
                                                                                2>&1 | tee -a ${logfile}

                backup_repo ${user} ${repo} ${backup_servers[${i}]} ${backup_servers[$((${i}+1))]}
            done
        done

        log "Done backing up ${user}'s repos..."                                2>&1 | tee -a ${logfile}

    done
}

send_log_to_servers() {
    log "Sending logs..."
    for (( i=0; i<${#backup_servers[@]}; i=i+2 )); do
        ssh ${backup_servers[${i}]} "mkdir -p ${backup_servers[$((${i}+1))]}/logs/"
        scp ${logfile} ${backup_servers[${i}]}:${backup_servers[$((${i}+1))]}/logs/`basename ${logfile}`
    done
}

log "Starting backing up git repos on `date`"                                   2>&1 | tee -a ${logfile}
backup_all_repos
log "Done backing up git repos on `date`"                                       2>&1 | tee -a ${logfile}
send_log_to_servers

